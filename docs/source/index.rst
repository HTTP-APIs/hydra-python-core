

Welcome to hydra-python-core's documentation!
=============================================

The `core library <https://github.com/HTTP-APIs/hydra-python-core>`__ is
used heavily in both `hydrus <https://github.com/http-apis/hydrus>`__
and agent. The core library has mainly two modules. The ``doc_writer``
and ``doc_maker`` module.

doc\_writer
-----------

The doc\_writer module contains the implementation of Hydra
specification classes, which are the core building pieces of any Hydra
powered REST APIs. The classes can be found at
http://www.hydra-cg.com/spec/latest/core/#classes. These classes is used
to build the APIDOC from scratch. To see how we can generate APIDOC from
scratch, please refer
`this <https://www.hydraecosystem.org/01-Usage#newdoc>`__. The mapping
of hydra classes and implementation of doc\_writer is given below:

.. list-table:: Mapping
   :widths: 50 50
   :header-rows: 1

   * - Hydra Class
     - class name in doc_writer
   * - hydra:SupportedProperty
     - HydraClassProp, HydraCollectionProp
   * - hydra:Status
     - HydraStatus
   * - hydra:Operation
     - HydraClassOp, HydraCollectionOp
   * - hydra:IriTemplateMapping
     - IriTemplateMapping
   * - hydra:Link
     - HydraLink
   * - hydra:Error
     - HydraError
   * - hydra:Collection
     - HydraCollection
   * - hydra:ApiDocumentation
     - HydraDoc
   * - hydra:Class
     - HydraClass

HydraEntryPoint class is the template for the ``entrypoint``. Entrypoint
is the location from where the agent discovers all the possible
locations it can go to. The ``hydrus`` uses the ``get`` method of this
class to generate the entrypoint of the API.

doc\_maker
----------

The doc\_maker module is used to parse existing JSON-LD Hydra based
APIDOC. It throws error, if anything is not spec compliant. It uses the
JSON-LD `expansion
algorithm <https://json-ld.org/spec/latest/json-ld-api/#expansion>`__
before parsing the apidoc. The benefit this expansion provides over
processing raw apidoc is the flexibility of parsing the IRIs. Some
authors prefer expanded IRIs, some use compacted IRIs and some use
mixture of both. So, to correctly able to parse all the IRIs we expand
the IRIs and thus start parsing the doc after coming to the same page.
This allows us to parse even more variety of apidocs. Then the small
parsing engine traverses through entire doc and extracts classes,
collections, links, property and status by calling appropriate methods
of this doc\_maker module.

Also another use case of doc\_maker is to update the IRIs once the doc
is generated by doc\_writer. For example, if the server url changes, or
api name changes, the changes can be reflected in the entire APIDOC by
passing the doc to the ``create_doc`` method of the doc\_maker with the
updated parameters.

The doc\_maker has following methods:

1. create\_doc - To parse the doc or to update the doc according to new
   params.
2. create\_collection - To parse the collection in HydraCollection of
   doc\_writer
3. create\_class - To parse classes in HydraClass of doc\_writer
4. create\_operation - To parse supported\_operations in HydraClassOp
5. create\_status - To parse the status in HydraStatus
6. create\_property - To parse the supported properties in
   HydraClassProp
7. create\_link - To parse properties referencing other class or
   collection in HydraLink
8. check\_namespace - To check if the url provided is in the correct
   namespace.


.. toctree::
   :maxdepth: 3
   :caption: Contents:

   doc_writer
   doc_maker



Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
